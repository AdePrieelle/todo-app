/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/createproject.js":
/*!******************************!*\
  !*** ./src/createproject.js ***!
  \******************************/
/*! exports provided: createProject, addCreateTodoToProjectTodos, deleteCreateTodoFromProjectTodos, editCreateTodoFromProjectTodos, addProjectToProjectList, deleteProjectFromProjectList, editProjectFromProjectList */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createProject\", function() { return createProject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addCreateTodoToProjectTodos\", function() { return addCreateTodoToProjectTodos; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"deleteCreateTodoFromProjectTodos\", function() { return deleteCreateTodoFromProjectTodos; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"editCreateTodoFromProjectTodos\", function() { return editCreateTodoFromProjectTodos; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addProjectToProjectList\", function() { return addProjectToProjectList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"deleteProjectFromProjectList\", function() { return deleteProjectFromProjectList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"editProjectFromProjectList\", function() { return editProjectFromProjectList; });\n// Contains all functionality (Create, Read, Update, Remove) for Project list items\n\n// Create Project\nconst createProject = (projectTitle) => {\n  return { \n    projectTitle,\n    todos: [],\n  };\n};\n\nconst addCreateTodoToProjectTodos = (projectlist, indexOfProject, todoItem) => {\n  projectlist[indexOfProject].todos.push(todoItem);\n}\n\nconst deleteCreateTodoFromProjectTodos = (projectlist, indexOfProject, indexOfTodoItem) => {\n  projectlist[indexOfProject].todos.splice(indexOfTodoItem, 1);\n}\n\nconst editCreateTodoFromProjectTodos = (projectlist, indexOfProject, indexOfTodoItem, todoItemKey, todoItemNewValue) => {\n  projectlist[indexOfProject].todos[indexOfTodoItem][todoItemKey] = todoItemNewValue;\n};\n\nconst addProjectToProjectList = (projectlist, project) => {\n  projectlist.push(project);\n}\n\nconst deleteProjectFromProjectList = (projectlist, indexOfProject) => {\n  projectlist.splice(indexOfProject, 1);\n}\n\nconst editProjectFromProjectList = (projectlist, indexOfProject, projectItemKey, projectItemNewValue) => {\n  projectlist[indexOfProject][projectItemKey] = projectItemNewValue;\n}\n\n\n\n/*\nArray to store all projects and their todo's in\n\n  let projectlist = [ \n    {projectTitle: \"project1\", todos: [{title: \"testTitle1\", description: \"testDescription1\", priority: \"low\", projectName: 0, notes: \"notes example\", checklist: \"yes\", dueDate: \"11/12/2020\"}, {title: \"testTitle2\", description: \"testDescription2\", priority: \"medium\", projectName: 0, notes: \"notes example\", checklist: \"yes\", dueDate: \"11/12/2020\"}]},\n    {projectTitle: \"project2\", todos: [{title: \"testTitle3\", description: \"testDescription3\", priority: \"high\", projectName: 1, notes: \"notes example\", checklist: \"yes\", dueDate: \"11/12/2020\"}, {title: \"testTitle4\", description: \"testDescription4\", priority: \"low\", projectName: 1, notes: \"notes example\", checklist: \"yes\", dueDate: \"11/12/2020\"}]},\n  ];\n*/\n\n//# sourceURL=webpack:///./src/createproject.js?");

/***/ }),

/***/ "./src/createtodo.js":
/*!***************************!*\
  !*** ./src/createtodo.js ***!
  \***************************/
/*! exports provided: createTodo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createTodo\", function() { return createTodo; });\n// Create Todo item\nconst createTodo = (title, description, priority, projectName, notes, checklist, dueDate) => {\n  return { \n    title, \n    description, \n    priority,\n    projectName, \n    notes, \n    checklist, \n    dueDate,\n  };\n};\n\n\n\n//# sourceURL=webpack:///./src/createtodo.js?");

/***/ }),

/***/ "./src/eventController.js":
/*!********************************!*\
  !*** ./src/eventController.js ***!
  \********************************/
/*! exports provided: collapseGridItemTodo, addProjectToProjectListButton, clearInputsForm, displayCreateTodoItemFormInputButton, displayCreateTodoItemFormAddTodoItemButton, displayCreateTodoItemFormProjectGridItemAddTodoItem, closeCreateTodoItemForm, copyTodoItemNameToBgModalFormTitle, renderBgModalContentFormInputSelectProjectOptgroup, addTodoItemToProject, updateChecklistStatusButton, addChecklistFinishedLineThrough, addProjectGridItemTodoPriorityBgColor, deleteProjectButton, deleteTodoItemFromProjectButton, editProjectGridItemTitleButton, editProjectGridItemTodoButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"collapseGridItemTodo\", function() { return collapseGridItemTodo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addProjectToProjectListButton\", function() { return addProjectToProjectListButton; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clearInputsForm\", function() { return clearInputsForm; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"displayCreateTodoItemFormInputButton\", function() { return displayCreateTodoItemFormInputButton; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"displayCreateTodoItemFormAddTodoItemButton\", function() { return displayCreateTodoItemFormAddTodoItemButton; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"displayCreateTodoItemFormProjectGridItemAddTodoItem\", function() { return displayCreateTodoItemFormProjectGridItemAddTodoItem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"closeCreateTodoItemForm\", function() { return closeCreateTodoItemForm; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copyTodoItemNameToBgModalFormTitle\", function() { return copyTodoItemNameToBgModalFormTitle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"renderBgModalContentFormInputSelectProjectOptgroup\", function() { return renderBgModalContentFormInputSelectProjectOptgroup; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addTodoItemToProject\", function() { return addTodoItemToProject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateChecklistStatusButton\", function() { return updateChecklistStatusButton; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addChecklistFinishedLineThrough\", function() { return addChecklistFinishedLineThrough; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addProjectGridItemTodoPriorityBgColor\", function() { return addProjectGridItemTodoPriorityBgColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"deleteProjectButton\", function() { return deleteProjectButton; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"deleteTodoItemFromProjectButton\", function() { return deleteTodoItemFromProjectButton; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"editProjectGridItemTitleButton\", function() { return editProjectGridItemTitleButton; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"editProjectGridItemTodoButton\", function() { return editProjectGridItemTodoButton; });\n/* harmony import */ var _createtodo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createtodo.js */ \"./src/createtodo.js\");\n/* harmony import */ var _createproject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createproject.js */ \"./src/createproject.js\");\n/* harmony import */ var _renderprojectstodos_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./renderprojectstodos.js */ \"./src/renderprojectstodos.js\");\n\n\n\n\n// Maximize and minimize the project-grid-item-todo-properties when clicked on a project-grid-item-todo\nconst collapseGridItemTodo = () => {\n  const projectGridItemTodo = document.querySelectorAll(\".project-grid-item-todo\");\n  projectGridItemTodo.forEach((gridItemTodo) => {\n    gridItemTodo.addEventListener(\"click\", function(e) {\n      let propertiesNodes = gridItemTodo.childNodes[0].childNodes;\n      propertiesNodes.forEach((property) => {\n        // if minimized\n        if (!property.classList.contains(\"maximized-grid-todo-item\")) {\n          property.classList += \" maximized-grid-todo-item\";\n          property.setAttribute(\"style\", \"display: block\");\n        }\n        // if maximized\n        else {\n          property.classList.remove(\"maximized-grid-todo-item\");\n          property.setAttribute(\"style\", \"display: none\");\n          propertiesNodes[0].setAttribute(\"style\", \"display: block\");\n          propertiesNodes[5].setAttribute(\"style\", \"display: block\");\n        }\n      });\n    });\n  });\n};\n\nconst clearInputsForm = (formClassToClear) => {\n  let formToClear = document.querySelector(formClassToClear);\n  formToClear.reset();\n}\n\nconst addProjectToProjectListButton = (projectList) => {\n  const addProjectAddTodoItemButton = document.querySelector(\".add-project-input-button\");\n  addProjectAddTodoItemButton.addEventListener(\"click\", function() {\n    const addProjectFormInput = document.querySelector(\".add-project-form-input\");\n    let addProjectFormInputValue = addProjectFormInput.value;\n    if (addProjectFormInputValue == \"\") {\n      alert(\"Please name your project\");\n      return;\n    }\n    for (let i = 0; i < projectList.length; i++ ) {\n      if (projectList[i].projectTitle == addProjectFormInputValue) {\n        alert(\"This project name already exists\");\n        clearInputsForm(\".add-project-add-todo-item-form-form\");\n        return;\n      }\n    }\n    Object(_createproject_js__WEBPACK_IMPORTED_MODULE_1__[\"addProjectToProjectList\"])(projectList, Object(_createproject_js__WEBPACK_IMPORTED_MODULE_1__[\"createProject\"])(addProjectFormInputValue));\n    clearInputsForm(\".add-project-add-todo-item-form-form\");\n    // populateStorage();\n    Object(_renderprojectstodos_js__WEBPACK_IMPORTED_MODULE_2__[\"renderProjectsTodos\"])(projectList);\n  });\n}\n\nconst displayCreateTodoItemFormInputButton = (projectlist) => {\n  const addTodoItemInputButton = document.querySelector(\".add-todo-item-input-button\");\n  addTodoItemInputButton.addEventListener(\"click\", function() {\n    const addTodoItemInputButton = document.querySelector(\".add-todo-item-form-input\");\n    let addTodoItemFormInputTitle = addTodoItemInputButton.value;\n    if (addTodoItemFormInputTitle == \"\") {\n      alert(\"Please name your todo item\");\n      return;\n    } else {\n      const bgModal = document.querySelector(\".bg-modal\");\n      bgModal.setAttribute(\"style\", \"display: flex\");\n      // Show submit button\n      let bgModalContentFormInputSubmitSubmit = document.querySelector(\".bg-modal-content-form-input-submit-submit\");\n      let bgModalContentFormInputSubmitSaveChanges= document.querySelector(\".bg-modal-content-form-input-submit-save-changes\");\n      bgModalContentFormInputSubmitSubmit.setAttribute(\"style\", \"display: flex\");\n      bgModalContentFormInputSubmitSaveChanges.setAttribute(\"style\", \"display: none\");\n      renderBgModalContentFormInputSelectProjectOptgroup(projectlist);\n    }\n  });\n};\n\nconst displayCreateTodoItemFormAddTodoItemButton = (projectlist) => {\n  const projectGridItemTodoAddTodoItem = document.querySelectorAll(\".project-grid-item-todo-add-todo-item\");\n  projectGridItemTodoAddTodoItem.forEach((addTodoItemButton) => {\n    addTodoItemButton.addEventListener(\"click\", function() {\n      const bgModal = document.querySelector(\".bg-modal\");\n      bgModal.setAttribute(\"style\", \"display: flex\");\n      // Show submit button\n      let bgModalContentFormInputSubmitSubmit = document.querySelector(\".bg-modal-content-form-input-submit-submit\");\n      let bgModalContentFormInputSubmitSaveChanges= document.querySelector(\".bg-modal-content-form-input-submit-save-changes\");\n      bgModalContentFormInputSubmitSubmit.setAttribute(\"style\", \"display: flex\");\n      bgModalContentFormInputSubmitSaveChanges.setAttribute(\"style\", \"display: none\");\n      renderBgModalContentFormInputSelectProjectOptgroup(projectlist);\n      selectProjectOptgroupOptionOnFormAddTodoItemButton(addTodoItemButton);\n    });\n  });\n};\n\nconst displayCreateTodoItemFormProjectGridItemAddTodoItem = (projectlist) => {\n  const projectGridItemAddTodoItem = document.querySelectorAll(\".project-grid-item-add-todo-item\");\n  projectGridItemAddTodoItem.forEach((projectGridItemAddTodoItemButton) => {\n    projectGridItemAddTodoItemButton.addEventListener(\"click\", function() {\n      const bgModal = document.querySelector(\".bg-modal\");\n      bgModal.setAttribute(\"style\", \"display: flex\");\n      // Show submit button\n      let bgModalContentFormInputSubmitSubmit = document.querySelector(\".bg-modal-content-form-input-submit-submit\");\n      let bgModalContentFormInputSubmitSaveChanges= document.querySelector(\".bg-modal-content-form-input-submit-save-changes\");\n      bgModalContentFormInputSubmitSubmit.setAttribute(\"style\", \"display: flex\");\n      bgModalContentFormInputSubmitSaveChanges.setAttribute(\"style\", \"display: none\");\n      renderBgModalContentFormInputSelectProjectOptgroup(projectlist);\n      selectProjectOptgroupOptionOnFormProjectGridItemAddTodoItem(projectGridItemAddTodoItemButton);\n    });\n  });\n};\n\nconst selectProjectOptgroupOptionOnFormDefault = (dataProjectIndexValue) => {\n  let bgModalContentFormInputSelectProjectOptgroup = document.querySelector(\".bg-modal-content-form-input-select-project-optgroup\");\n  let bgModalContentFormInputSelectProjectOptgroupChildNodes = bgModalContentFormInputSelectProjectOptgroup.childNodes;\n  for (let project of bgModalContentFormInputSelectProjectOptgroupChildNodes) {\n    if (dataProjectIndexValue == project.value) {\n      project.selected = \"selected\";\n    }\n  }\n}\n\nconst selectProjectOptgroupOptionOnFormAddTodoItemButton = (addTodoItemButton) => {\n  let dataProjectIndexValue = addTodoItemButton.parentNode.parentNode.getAttribute(\"data-project-index\");\n  selectProjectOptgroupOptionOnFormDefault(dataProjectIndexValue);\n}\n\nconst selectProjectOptgroupOptionOnFormProjectGridItemAddTodoItem = (projectGridItemAddTodoItemButton) => {\n  let dataProjectIndexValue = projectGridItemAddTodoItemButton.parentNode.parentNode.parentNode.getAttribute(\"data-project-index\");\n  selectProjectOptgroupOptionOnFormDefault(dataProjectIndexValue);\n}\n\nconst selectProjectOptgroupOptionOnFormProjectGridItemAddTodoItemEdit = (projectGridItemTodoButtonsUpdateBtn) => {\n  let dataProjectIndexValue = projectGridItemTodoButtonsUpdateBtn.parentNode.parentNode.parentNode.parentNode.getAttribute(\"data-project-index\");\n  selectProjectOptgroupOptionOnFormDefault(dataProjectIndexValue);\n}\n\nconst closeCreateTodoItemForm = () => {\n  const bgModalContentClose = document.querySelector(\".bg-modal-content-close\");\n  bgModalContentClose.addEventListener(\"click\", function() {\n    closeCreateTodoItemFormDefault();\n  });\n};\n\nconst closeCreateTodoItemFormDefault = () => {\n    const bgModal = document.querySelector(\".bg-modal\");\n    bgModal.setAttribute(\"style\", \"display: none\");\n    clearInputsForm(\".bg-modal-content-form\");\n}\n\nconst copyTodoItemNameToBgModalFormTitle = () => {\n  const addTodoItemFormInput = document.querySelector(\".add-todo-item-form-input\");\n  const addTodoItemInputButton = document.querySelector(\".add-todo-item-input-button\");\n  addTodoItemInputButton.addEventListener(\"click\", function() {\n    let addTodoItemFormInputTitle = addTodoItemFormInput.value;\n    const bgModalContentFormInputText = document.querySelector(\".bg-modal-content-form-input-text\");\n    bgModalContentFormInputText.value = addTodoItemFormInputTitle;\n    clearInputsForm(\".add-project-add-todo-item-form-form\");\n  });\n};\n\nconst renderBgModalContentFormInputSelectProjectOptgroup = (projectlist) => {\n  const bgModalContentFormInputSelectProjectOptgroup = document.querySelector(\".bg-modal-content-form-input-select-project-optgroup\");\n  bgModalContentFormInputSelectProjectOptgroup.innerHTML = \"\";\n  for (let i = 0; i < projectlist.length; i++) {\n    let bgModalContentFormInputSelectProjectOptgroupOption = document.createElement(\"option\");\n    bgModalContentFormInputSelectProjectOptgroupOption.classList += \".bg-modal-content-form-input-select-project-optgroup-option\"\n    bgModalContentFormInputSelectProjectOptgroupOption.value = i;\n    bgModalContentFormInputSelectProjectOptgroup.appendChild(bgModalContentFormInputSelectProjectOptgroupOption);\n    let bgModalContentFormInputSelectProjectOptgroupText = document.createTextNode(`${projectlist[i].projectTitle}`);\n    bgModalContentFormInputSelectProjectOptgroupOption.appendChild(bgModalContentFormInputSelectProjectOptgroupText);\n  }\n};\n\nconst addTodoItemToProject = (projectlist) => {\n  const bgModalContentFormInputSubmit = document.querySelector(\".bg-modal-content-form-input-submit\");\n  bgModalContentFormInputSubmit.addEventListener(\"click\", function() {\n    const bgModalContentFormInputTextTitle = document.querySelector(\".bg-modal-content-form-input-text-title\");\n    let addTodoItemCreateTitle = bgModalContentFormInputTextTitle.value;\n    if (addTodoItemCreateTitle == \"\") {\n      alert(\"Please enter a title\");\n      return;\n    }\n    const bgModalContentFormInputTextareaDescription = document.querySelector(\".bg-modal-content-form-input-textarea-description\");\n    let addTodoItemCreateDescription = bgModalContentFormInputTextareaDescription.value;\n    const bgModalContentFormPriority = document.querySelector(`input[name = \"bg-modal-content-form-priority\"]:checked`);\n    let addTodoItemCreatePriority = bgModalContentFormPriority.value;\n    const bgModalContentFormSelectProject = document.querySelector(\".bg-modal-content-form-select-project\");\n    let addTodoItemCreateProjectname = +bgModalContentFormSelectProject.value;\n    const bgModalContentFormInputTextareaNotes = document.querySelector(\".bg-modal-content-form-input-textarea-notes\");\n    let addTodoItemCreateNotes = bgModalContentFormInputTextareaNotes.value;\n    const bgModalContentFormInputCheckboxFinished = document.querySelector(\".bg-modal-content-form-input-checkbox-finished\");\n    let addTodoItemCreateFinished = \"\";\n    if (bgModalContentFormInputCheckboxFinished.checked) {\n      addTodoItemCreateFinished = \"yes\";\n    } else {\n      addTodoItemCreateFinished = \"no\";\n    }\n    const bgModalContentFormInputDate = document.querySelector(\".bg-modal-content-form-input-date\");\n    let addTodoItemCreateDuedateToConvert = bgModalContentFormInputDate.value;\n    let addTodoItemCreateDuedate = addTodoItemCreateDuedateToConvert.split(\"-\").reverse().join(\"-\");\n    if (addTodoItemCreateDuedate == \"\") {\n      addTodoItemCreateDuedate = \"No due date\";\n    }\n\n    // add todo to project\n    Object(_createproject_js__WEBPACK_IMPORTED_MODULE_1__[\"addCreateTodoToProjectTodos\"])(\n      projectlist, \n      addTodoItemCreateProjectname, \n      Object(_createtodo_js__WEBPACK_IMPORTED_MODULE_0__[\"createTodo\"])(\n        addTodoItemCreateTitle,\n        addTodoItemCreateDescription,\n        addTodoItemCreatePriority,\n        addTodoItemCreateProjectname,\n        addTodoItemCreateNotes,\n        addTodoItemCreateFinished,\n        addTodoItemCreateDuedate,        \n      )\n    );\n    closeCreateTodoItemFormDefault();\n    // populateStorage();\n    Object(_renderprojectstodos_js__WEBPACK_IMPORTED_MODULE_2__[\"renderProjectsTodos\"])(projectlist);\n  });\n}\n\nconst updateChecklistStatusButton = (projectlist) => {\n  const projectGridItemTodoButtonsChecklist = document.querySelectorAll(\".project-grid-item-todo-buttons-checklist\");\n  projectGridItemTodoButtonsChecklist.forEach((checklistButton) => {\n    checklistButton.addEventListener(\"click\", function() {\n      let indexOfProject = +checklistButton.parentNode.parentNode.parentNode.parentNode.getAttribute(\"data-project-index\");\n      let indexOfProjectTodoItem = +checklistButton.parentNode.parentNode.getAttribute(\"data-project-todo-item-index\");\n      let newChecklistvalue;\n      if (projectlist[indexOfProject].todos[indexOfProjectTodoItem][\"checklist\"] == \"yes\") {\n        newChecklistvalue = \"no\";\n      } else {\n        newChecklistvalue = \"yes\";\n      }\n      Object(_createproject_js__WEBPACK_IMPORTED_MODULE_1__[\"editCreateTodoFromProjectTodos\"])(projectlist, indexOfProject, indexOfProjectTodoItem, \"checklist\", newChecklistvalue);\n      // populateStorage();\n      Object(_renderprojectstodos_js__WEBPACK_IMPORTED_MODULE_2__[\"renderProjectsTodos\"])(projectlist);\n    });\n  });\n}\n\nconst addChecklistFinishedLineThrough = (projectlist) => {\n  for (let i = 0; i < projectlist.length; i++) {\n    for (let j = 0; j < projectlist[i].todos.length; j++) {\n      const projectGridItemTodoPropertiesWrapper = document.querySelectorAll(\".project-grid-item-todo-properties-wrapper\");\n      projectGridItemTodoPropertiesWrapper.forEach((todoproperties) => {\n        if (\n          todoproperties.parentNode.getAttribute(\"data-project-todo-item-index\") == j \n          && todoproperties.parentNode.parentNode.parentNode.getAttribute(\"data-project-index\") == i\n          && projectlist[i].todos[j][\"checklist\"] == \"yes\"\n        ) {\n          todoproperties.style.textDecoration = \"line-through\";\n          todoproperties.style.color = \"rgba(140, 140, 140)\";\n          todoproperties.parentNode.style.opacity = \".6\";\n        };\n      });\n    };\n  };\n};\n\nconst addProjectGridItemTodoPriorityBgColor = (projectlist) => {\n  for (let i = 0; i < projectlist.length; i++) {\n    for (let j = 0; j < projectlist[i].todos.length; j++) {\n      const projectGridItemTodo = document.querySelectorAll(\".project-grid-item-todo\");\n      projectGridItemTodo.forEach((todoItem) => {\n        if (\n          todoItem.getAttribute(\"data-project-todo-item-index\") == j \n          && todoItem.parentNode.parentNode.getAttribute(\"data-project-index\") == i\n        ) {\n          if (projectlist[i].todos[j][\"priority\"] == \"low\") {\n            todoItem.style.backgroundColor = \"#b1ffa3\";\n          } else if (projectlist[i].todos[j][\"priority\"] == \"medium\") {\n            todoItem.style.backgroundColor = \"#fffca3\";\n          } else if (projectlist[i].todos[j][\"priority\"] == \"high\") {\n            todoItem.style.backgroundColor = \"#ffd6a3\";\n          } else if (projectlist[i].todos[j][\"priority\"] == \"urgent\") {\n            todoItem.style.backgroundColor = \"#ffa3a3\";\n          }\n        };\n      });\n    };\n  };\n};\n\nconst deleteProjectButton = (projectlist) => {\n  const projectGridItemDeleteProject = document.querySelectorAll(\".project-grid-item-delete-project\");\n  projectGridItemDeleteProject.forEach((deleteTheProjectButton) => {\n    deleteTheProjectButton.addEventListener(\"click\", function() {\n      let confirmToDeleteProject = confirm(\"Are you sure you want to delete this project and it's todo items?\");\n      if (confirmToDeleteProject) {\n        let indexOfProject = +deleteTheProjectButton.parentNode.parentNode.parentNode.getAttribute(\"data-project-index\");\n        Object(_createproject_js__WEBPACK_IMPORTED_MODULE_1__[\"deleteProjectFromProjectList\"])(projectlist, indexOfProject);\n        // populateStorage();\n        Object(_renderprojectstodos_js__WEBPACK_IMPORTED_MODULE_2__[\"renderProjectsTodos\"])(projectlist);\n      };\n    });\n  });\n};\n\nconst deleteTodoItemFromProjectButton = (projectlist) => {\n  const projectGridItemTodoButtonsDelete = document.querySelectorAll(\".project-grid-item-todo-buttons-delete\");\n  projectGridItemTodoButtonsDelete.forEach((deleteTheTodoItem) => {\n    deleteTheTodoItem.addEventListener(\"click\", function() {\n      let confirmToDeleteTodoItemFromProject = confirm(\"Are you sure that you want to delete this todo item?\");\n      if (confirmToDeleteTodoItemFromProject) {\n        let indexOfProject = +deleteTheTodoItem.parentNode.parentNode.parentNode.parentNode.getAttribute(\"data-project-index\");\n        let indexOfTodoItem = +deleteTheTodoItem.parentNode.parentNode.getAttribute(\"data-project-todo-item-index\");\n        Object(_createproject_js__WEBPACK_IMPORTED_MODULE_1__[\"deleteCreateTodoFromProjectTodos\"])(projectlist, indexOfProject, indexOfTodoItem);\n        // populateStorage();\n        Object(_renderprojectstodos_js__WEBPACK_IMPORTED_MODULE_2__[\"renderProjectsTodos\"])(projectlist);\n      };\n    });\n  });\n};\n\nconst editProjectGridItemTitleButton = (projectlist) => {\n  const projectGridItemUpdateProjectTitle = document.querySelectorAll(\".project-grid-item-update-project-title\");\n  projectGridItemUpdateProjectTitle.forEach((editProjectTitleButton) => {\n    editProjectTitleButton.addEventListener(\"click\", function() {\n      let projectTitleToEdit = editProjectTitleButton.parentNode.previousSibling;\n\n      // Replace the project-grid-item-title with an input to edit the project-grid-item-title\n      projectTitleToEdit.innerHTML = \"\";\n\n      let projectGridItemTitleForm = document.createElement(\"form\");\n      projectGridItemTitleForm.classList += \"project-grid-item-title-form\"\n      projectTitleToEdit.appendChild(projectGridItemTitleForm);\n\n      let projectGridItemTitleFormInput = document.createElement(\"input\");\n      projectGridItemTitleFormInput.classList += \"project-grid-item-title-form-input\";\n      projectGridItemTitleFormInput.type = \"text\";\n      projectGridItemTitleFormInput.name = \"project-grid-item-title-form-input-edit\";\n\n      let indexOfProject = +editProjectTitleButton.parentNode.parentNode.parentNode.getAttribute(\"data-project-index\");\n      projectGridItemTitleFormInput.value = projectlist[indexOfProject][\"projectTitle\"];\n\n      projectGridItemTitleForm.appendChild(projectGridItemTitleFormInput);\n\n      let projectGridItemTitleFormSaveEditedProjectTitleButton = document.createElement(\"div\");\n      projectGridItemTitleFormSaveEditedProjectTitleButton.classList = \"project-grid-item-title-form-save-edited-project-title-button\";\n      projectGridItemTitleForm.appendChild(projectGridItemTitleFormSaveEditedProjectTitleButton);\n\n      let projectGridItemTitleFormSaveEditedProjectTitleButtonText = document.createTextNode(\"SAVE\");\n      projectGridItemTitleFormSaveEditedProjectTitleButton.appendChild(projectGridItemTitleFormSaveEditedProjectTitleButtonText);\n\n      // add eventlistener to save the project-grid-item-title from the input and edit the project-grid-item-title and render it\n      projectGridItemTitleFormSaveEditedProjectTitleButton.addEventListener(\"click\", function() {\n        Object(_createproject_js__WEBPACK_IMPORTED_MODULE_1__[\"editProjectFromProjectList\"])(projectlist, indexOfProject, \"projectTitle\", projectGridItemTitleFormInput.value);\n        // populateStorage();\n        Object(_renderprojectstodos_js__WEBPACK_IMPORTED_MODULE_2__[\"renderProjectsTodos\"])(projectlist);\n      });\n    });\n  });\n};\n\nconst editProjectGridItemTodoButton = (projectlist) => {\n  const projectGridItemTodoButtonsUpdate = document.querySelectorAll(\".project-grid-item-todo-buttons-update\");\n  projectGridItemTodoButtonsUpdate.forEach((editProjectItemTodoButton) => {\n    editProjectItemTodoButton.addEventListener(\"click\", function() {\n      let indexOfProject = editProjectItemTodoButton.parentNode.parentNode.parentNode.parentNode.getAttribute(\"data-project-index\");\n      let indexOfTodoItem = editProjectItemTodoButton.parentNode.parentNode.getAttribute(\"data-project-todo-item-index\");\n      // render bg modal form\n      const bgModal = document.querySelector(\".bg-modal\");\n      bgModal.setAttribute(\"style\", \"display: flex\");\n      renderBgModalContentFormInputSelectProjectOptgroup(projectlist);\n      selectProjectOptgroupOptionOnFormProjectGridItemAddTodoItemEdit(editProjectItemTodoButton);\n\n      // copy current todo item properties value to input fields\n\n      // display title value of todo item in form\n      let bgModalContentFormInputTextTitle = document.querySelector(\".bg-modal-content-form-input-text-title\");\n      bgModalContentFormInputTextTitle.value = projectlist[indexOfProject].todos[indexOfTodoItem][\"title\"];\n\n      // display description value of todo item in form\n      let bgModalContentFormInputTextareaDescription = document.querySelector(\".bg-modal-content-form-input-textarea-description\");\n      bgModalContentFormInputTextareaDescription.value = projectlist[indexOfProject].todos[indexOfTodoItem][\"description\"];\n\n      // display priority value of todo item in form\n      let bgModalContentFormPriority = document.querySelector(`input[name = \"bg-modal-content-form-priority\"]:checked`);\n      bgModalContentFormPriority.value = projectlist[indexOfProject].todos[indexOfTodoItem][\"priority\"];\n      let bgModalContentFormInputRadioLow = document.querySelector(\".bg-modal-content-form-input-radio-low\");\n      let bgModalContentFormInputRadioMedium = document.querySelector(\".bg-modal-content-form-input-radio-medium\");\n      let bgModalContentFormInputRadioHigh = document.querySelector(\".bg-modal-content-form-input-radio-high\");\n      let bgModalContentFormInputRadioUrgent = document.querySelector(\".bg-modal-content-form-input-radio-urgent\");\n      if (bgModalContentFormPriority.value == \"low\") {\n        bgModalContentFormInputRadioLow.checked = true;\n        bgModalContentFormInputRadioMedium.checked = false;\n        bgModalContentFormInputRadioHigh.checked = false;\n        bgModalContentFormInputRadioUrgent.checked = false;\n      }\n      if (bgModalContentFormPriority.value == \"medium\") {\n        bgModalContentFormInputRadioLow.checked = false;\n        bgModalContentFormInputRadioMedium.checked = true;\n        bgModalContentFormInputRadioHigh.checked = false;\n        bgModalContentFormInputRadioUrgent.checked = false;\n      }\n      if (bgModalContentFormPriority.value == \"high\") {\n        bgModalContentFormInputRadioLow.checked = false;\n        bgModalContentFormInputRadioMedium.checked = false;\n        bgModalContentFormInputRadioHigh.checked = true;\n        bgModalContentFormInputRadioUrgent.checked = false;\n      }\n      if (bgModalContentFormPriority.value == \"urgent\") {\n        bgModalContentFormInputRadioLow.checked = false;\n        bgModalContentFormInputRadioMedium.checked = false;\n        bgModalContentFormInputRadioHigh.checked = false;\n        bgModalContentFormInputRadioUrgent.checked = true;\n      }\n\n      // Change priority value to radio button value\n      let bgModalContentFormPriorityValueEditedLoad = bgModalContentFormPriority.value;\n      bgModalContentFormInputRadioLow.addEventListener(\"click\", function() {\n        bgModalContentFormPriorityValueEditedLoad = \"low\";\n      });\n      bgModalContentFormInputRadioMedium.addEventListener(\"click\", function() {\n        bgModalContentFormPriorityValueEditedLoad = \"medium\";\n      });\n      bgModalContentFormInputRadioHigh.addEventListener(\"click\", function() {\n        bgModalContentFormPriorityValueEditedLoad = \"high\";\n      });\n      bgModalContentFormInputRadioUrgent.addEventListener(\"click\", function() {\n        bgModalContentFormPriorityValueEditedLoad = \"urgent\";\n      });\n\n      // display notes value of todo item in form\n      let bgModalContentFormInputTextareaNotes = document.querySelector(\".bg-modal-content-form-input-textarea-notes\");\n      bgModalContentFormInputTextareaNotes.value = projectlist[indexOfProject].todos[indexOfTodoItem][\"notes\"];\n\n      // display checkbox checklist finished status in form\n      let bgModalContentFormInputCheckboxFinished = document.querySelector(\".bg-modal-content-form-input-checkbox-finished\");\n      bgModalContentFormInputCheckboxFinished.value = projectlist[indexOfProject].todos[indexOfTodoItem][\"checklist\"];\n      if (bgModalContentFormInputCheckboxFinished.value == \"yes\") {\n        bgModalContentFormInputCheckboxFinished.checked = true;\n      } else {\n        bgModalContentFormInputCheckboxFinished.checked = false;\n      }\n\n      // display dueDate value of todo item in form\n      let bgModalContentFormInputDate = document.querySelector(\".bg-modal-content-form-input-date\");\n      let dateToBeReversed = projectlist[indexOfProject].todos[indexOfTodoItem][\"dueDate\"];\n      let dateReversed = dateToBeReversed.split(\"-\").reverse().join(\"-\");\n      bgModalContentFormInputDate.value = dateReversed;\n\n      // add save changes button for Todo Item form\n      let bgModalContentFormInputSubmitSubmit = document.querySelector(\".bg-modal-content-form-input-submit-submit\");\n      let bgModalContentFormInputSubmitSaveChanges= document.querySelector(\".bg-modal-content-form-input-submit-save-changes\");\n      bgModalContentFormInputSubmitSubmit.setAttribute(\"style\", \"display: none\");\n      bgModalContentFormInputSubmitSaveChanges.setAttribute(\"style\", \"display: flex\");\n\n      // add event to save edited todo item from inputs\n      bgModalContentFormInputSubmitSaveChanges.addEventListener(\"click\", function editTheTodoItemChanges() {\n        // get inputs values\n        const bgModalContentFormInputTextTitle = document.querySelector(\".bg-modal-content-form-input-text-title\");\n        let addTodoItemCreateTitle = bgModalContentFormInputTextTitle.value;\n        if (addTodoItemCreateTitle == \"\") {\n          alert(\"Please enter a title\");\n          return;\n        }\n        const bgModalContentFormInputTextareaDescription = document.querySelector(\".bg-modal-content-form-input-textarea-description\");\n        let addTodoItemCreateDescription = bgModalContentFormInputTextareaDescription.value;\n        let addTodoItemCreatePriority = bgModalContentFormPriorityValueEditedLoad;\n        const bgModalContentFormSelectProject = document.querySelector(\".bg-modal-content-form-select-project\");\n        let addTodoItemCreateProjectname = +bgModalContentFormSelectProject.value;\n        const bgModalContentFormInputTextareaNotes = document.querySelector(\".bg-modal-content-form-input-textarea-notes\");\n        let addTodoItemCreateNotes = bgModalContentFormInputTextareaNotes.value;\n        const bgModalContentFormInputCheckboxFinished = document.querySelector(\".bg-modal-content-form-input-checkbox-finished\");\n        let addTodoItemCreateFinished = \"\";\n        if (bgModalContentFormInputCheckboxFinished.checked) {\n          addTodoItemCreateFinished = \"yes\";\n        } else {\n          addTodoItemCreateFinished = \"no\";\n        }\n        const bgModalContentFormInputDate = document.querySelector(\".bg-modal-content-form-input-date\");\n        let addTodoItemCreateDuedateReversed = bgModalContentFormInputDate.value;\n        let addTodoItemCreateDuedate = addTodoItemCreateDuedateReversed.split(\"-\").reverse().join(\"-\");\n        if (addTodoItemCreateDuedate == \"\") {\n          addTodoItemCreateDuedate = \"No due date\";\n        };\n\n        // edit todo item and save it to the projectlist if the selected project stays the same else delete the project from the current project and add it to another project\n        if (addTodoItemCreateProjectname == indexOfProject) {\n          Object(_createproject_js__WEBPACK_IMPORTED_MODULE_1__[\"editCreateTodoFromProjectTodos\"])(projectlist, indexOfProject, indexOfTodoItem, \"title\", addTodoItemCreateTitle);\n          Object(_createproject_js__WEBPACK_IMPORTED_MODULE_1__[\"editCreateTodoFromProjectTodos\"])(projectlist, indexOfProject, indexOfTodoItem, \"description\", addTodoItemCreateDescription);\n          Object(_createproject_js__WEBPACK_IMPORTED_MODULE_1__[\"editCreateTodoFromProjectTodos\"])(projectlist, indexOfProject, indexOfTodoItem, \"priority\", addTodoItemCreatePriority);\n          Object(_createproject_js__WEBPACK_IMPORTED_MODULE_1__[\"editCreateTodoFromProjectTodos\"])(projectlist, indexOfProject, indexOfTodoItem, \"projectName\", addTodoItemCreateProjectname);\n          Object(_createproject_js__WEBPACK_IMPORTED_MODULE_1__[\"editCreateTodoFromProjectTodos\"])(projectlist, indexOfProject, indexOfTodoItem, \"notes\", addTodoItemCreateNotes);\n          Object(_createproject_js__WEBPACK_IMPORTED_MODULE_1__[\"editCreateTodoFromProjectTodos\"])(projectlist, indexOfProject, indexOfTodoItem, \"checklist\", addTodoItemCreateFinished);\n          Object(_createproject_js__WEBPACK_IMPORTED_MODULE_1__[\"editCreateTodoFromProjectTodos\"])(projectlist, indexOfProject, indexOfTodoItem, \"dueDate\", addTodoItemCreateDuedate);\n        } else {\n          Object(_createproject_js__WEBPACK_IMPORTED_MODULE_1__[\"deleteCreateTodoFromProjectTodos\"]) (projectlist, indexOfProject, indexOfTodoItem);\n          Object(_createproject_js__WEBPACK_IMPORTED_MODULE_1__[\"addCreateTodoToProjectTodos\"])(\n            projectlist, \n            addTodoItemCreateProjectname, \n            Object(_createtodo_js__WEBPACK_IMPORTED_MODULE_0__[\"createTodo\"])(\n              addTodoItemCreateTitle,\n              addTodoItemCreateDescription,\n              addTodoItemCreatePriority,\n              addTodoItemCreateProjectname,\n              addTodoItemCreateNotes,\n              addTodoItemCreateFinished,\n              addTodoItemCreateDuedate,        \n            )\n          );\n        }\n        \n        // display the submit button for the form again when closing\n        bgModalContentFormInputSubmitSubmit.setAttribute(\"style\", \"display: flex\");\n        bgModalContentFormInputSubmitSaveChanges.setAttribute(\"style\", \"display: none\");\n\n        // close the bg modal form\n        closeCreateTodoItemFormDefault();\n\n        // render the projects with the new edited todo item\n        // populateStorage();\n        Object(_renderprojectstodos_js__WEBPACK_IMPORTED_MODULE_2__[\"renderProjectsTodos\"])(projectlist);\n\n        // prevent that this event will be added multiple times to bgModalContentFormInputSubmitSaveChanges button\n        bgModalContentFormInputSubmitSaveChanges.removeEventListener(\"click\", editTheTodoItemChanges);\n      }); \n    });\n  });\n};\n\n\n\n/*\nArray to store all projects and their todo's in\n\n  let projectlist = [ \n    {projectTitle: \"project1\", todos: [{title: \"testTitle1\", description: \"testDescription1\", priority: \"low\", projectName: 0, notes: \"notes example\", checklist: \"yes\", dueDate: \"11/12/2020\"}, {title: \"testTitle2\", description: \"testDescription2\", priority: \"medium\", projectName: 0, notes: \"notes example\", checklist: \"yes\", dueDate: \"11/12/2020\"}]},\n    {projectTitle: \"project2\", todos: [{title: \"testTitle3\", description: \"testDescription3\", priority: \"high\", projectName: 1, notes: \"notes example\", checklist: \"yes\", dueDate: \"11/12/2020\"}, {title: \"testTitle4\", description: \"testDescription4\", priority: \"low\", projectName: 1, notes: \"notes example\", checklist: \"yes\", dueDate: \"11/12/2020\"}]},\n  ];\n*/\n\n//# sourceURL=webpack:///./src/eventController.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _createtodo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createtodo.js */ \"./src/createtodo.js\");\n/* harmony import */ var _createproject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createproject.js */ \"./src/createproject.js\");\n/* harmony import */ var _renderprojectstodos_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./renderprojectstodos.js */ \"./src/renderprojectstodos.js\");\n/* harmony import */ var _eventController_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eventController.js */ \"./src/eventController.js\");\n\n\n\n\n\n// fix bug for mobile scrolling white bar at the bottom of 60px\nfunction resizeBackground() {\n  document.body.scrollHeight = document.body.scrollHeight + 60 + 'px';\n}\nresizeBackground();\n\n// use localStorage.clear() to reset the library\n// localStorage.clear();\n// projectlist that stores all projects, default projectlist if localStorage is not set\nlet projectlist = [];\nObject(_createproject_js__WEBPACK_IMPORTED_MODULE_1__[\"addProjectToProjectList\"])(projectlist, Object(_createproject_js__WEBPACK_IMPORTED_MODULE_1__[\"createProject\"])(\"Groceries\"));\nObject(_createproject_js__WEBPACK_IMPORTED_MODULE_1__[\"addCreateTodoToProjectTodos\"])(projectlist, 0, Object(_createtodo_js__WEBPACK_IMPORTED_MODULE_0__[\"createTodo\"])(\n  'Buy milk', 'Buy 2 bottles of milk', 'medium', 0, 'Get 1.5L bottles', 'no', '16-12-2020'\n));\nObject(_createproject_js__WEBPACK_IMPORTED_MODULE_1__[\"addCreateTodoToProjectTodos\"])(projectlist, 0, Object(_createtodo_js__WEBPACK_IMPORTED_MODULE_0__[\"createTodo\"])(\n  'Buy bread', 'Buy a full bread', 'high', 0, 'Get brown bread', 'no', '15-12-2020'\n));\n\n// Add localStorage to save projects and todo items locally\n// Testing whether storage has been populated\nif(!localStorage.getItem('projectlist')) {\n  console.log(\"no local storage\");\n  populateStorage();\n} else {\n  setStyles();\n}\n\n// Setting values in storage\nfunction populateStorage() {\n  localStorage.setItem('projectlist', JSON.stringify(projectlist));\n  setStyles();\n}\n\n// Getting values from storage\nfunction setStyles() {\n  projectlist = JSON.parse(localStorage.getItem('projectlist'));\n}\n\n// renderProjectsTodos(allprojectsNew);\nObject(_renderprojectstodos_js__WEBPACK_IMPORTED_MODULE_2__[\"renderProjectsTodos\"])(projectlist);\n\n// Project Name button to add project to projectList\nObject(_eventController_js__WEBPACK_IMPORTED_MODULE_3__[\"addProjectToProjectListButton\"])(projectlist);\n// collapseGridItemTodo();\n\n// display bg-modal form on input button click\nObject(_eventController_js__WEBPACK_IMPORTED_MODULE_3__[\"displayCreateTodoItemFormInputButton\"])(projectlist);\n\n// close bg-modal form on close button click\nObject(_eventController_js__WEBPACK_IMPORTED_MODULE_3__[\"closeCreateTodoItemForm\"])();\n\n// copy todoItemInputValue to bgModal title\nObject(_eventController_js__WEBPACK_IMPORTED_MODULE_3__[\"copyTodoItemNameToBgModalFormTitle\"])();\n\n// add todoItem to Project\nObject(_eventController_js__WEBPACK_IMPORTED_MODULE_3__[\"addTodoItemToProject\"])(projectlist);\n\n/*\nArray to store all projects and their todo's in\n\n  let projectlist = [ \n    {projectTitle: \"project1\", todos: [{title: \"testTitle1\", description: \"testDescription1\", priority: \"low\", projectName: 0, notes: \"notes example\", checklist: \"yes\", dueDate: \"11/12/2020\"}, {title: \"testTitle2\", description: \"testDescription2\", priority: \"medium\", projectName: 0, notes: \"notes example\", checklist: \"yes\", dueDate: \"11/12/2020\"}]},\n    {projectTitle: \"project2\", todos: [{title: \"testTitle3\", description: \"testDescription3\", priority: \"high\", projectName: 1, notes: \"notes example\", checklist: \"yes\", dueDate: \"11/12/2020\"}, {title: \"testTitle4\", description: \"testDescription4\", priority: \"low\", projectName: 1, notes: \"notes example\", checklist: \"yes\", dueDate: \"11/12/2020\"}]},\n  ];\n*/\n\n/* \nnpx webpack --watch\nTo run webpack each time a change will be made\n*/\n\n/*\nStart watching for compiling scss to css\nsass --watch main.scss:main.css\n*/\n\n/*\n1.  Your ‘todos’ are going to be objects that you’ll want to dynamically create, \n    which means either using factories or constructors/classes to generate them.\n\n    1.1  Create object for \"Todo item\" by factory function or constructors/classes\n\n2.  Brainstorm what kind of properties your todo-items are going to have. \n    At a minimum they should have a title, description, dueDate and priority. \n    You might also want to include notes or even a checklist.\n\n    2.1   Add properties to todo-items object:\n          title, description, dueDate and priority\n    2.2   (Optional) add properties:\n          notes and cheklist\n\n3.  Your todo list should have projects or separate lists of todos. \n    When a user first opens the app, \n    there should be some sort of ‘default’ project to which all of their todos are put. \n    Users should be able to create new projects \n    and choose which project their todos go into.\n\n    3.1   Create an array for a project to all todos from the project\n    3.2   Create an array for all projects.\n    3.3   Add functionality for to create new projects\n    3.4   Add functionality to assign a \"todo item\" to a project\n\n4.  You should separate your application logic \n    (i.e. creating new todos, setting todos as complete, changing todo priority etc.) \n    from the DOM-related stuff, so keep all of those things in separate modules.\n\n    4.1   Create seperate modules for new todos, setting todos as complete, \n          changing priority and more functionalities.\n    4.2   Create DOM-related functionality seperated from the application logic.\n\n5.  The look of the User Interface is up to you, \n    but it should be able to do the following:\n\n    1.    view all projects\n    2.    view all todos in each project \n          ( probably just the title and duedate.. \n            perhaps changing color for different priorities)\n    3.    expand a single todo to see/edit its details\n    4.    delete a todo\n\n    5.1   Create function to display all projects\n    5.2   5.2.1 Create function to display all todos:\n                display their title, duedate and perhaps change color for priorities?\n          5.2.2 (display it when a project is clicked on?)\n    5.3   Create a function that expands a single ToDo item and see all info\n    5.4   Create functions that edit the details (properties)\n    5.5   Create a delete \"todo item\" function\n\n6.  For inspiration, check out the following great todo apps. \n    (look at screenshots, watch their introduction videos etc.)\n\n    1.    Todoist\n    2.    Things\n    3.    any.do\n\n7.  Use localStorage to save user's projects and todos between sessions\n\n    7.1   Add localstorage functionality\n\n8.  Since you are probably already using webpack, \n    adding external libraries from npm is a cinch! \n    You might want to consider using the following useful library in your code:\n\n    date-fns gives you a bunch of handy functions for formatting \n    and manipulating dates and times.\n\n    8.1   Add date-fns format to dueDate property.\n*/\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/renderprojectstodos.js":
/*!************************************!*\
  !*** ./src/renderprojectstodos.js ***!
  \************************************/
/*! exports provided: renderProjectsTodos */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"renderProjectsTodos\", function() { return renderProjectsTodos; });\n/* harmony import */ var _eventController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eventController */ \"./src/eventController.js\");\n\n\nconst renderProjectsTodos = ((projectlist) => {\n\n  // projects-grid\n  let projectsGrid = document.querySelector(\".projects-grid\");\n  projectsGrid.innerHTML = \"\";\n\n  for (let i = 0; i < projectlist.length; i++) {\n    // projects-grid-item\n    let projectsGridItem = document.createElement(\"div\");\n    projectsGridItem.classList = \"projects-grid-item\";\n    projectsGridItem.setAttribute('data-project-index', i);\n    projectsGrid.appendChild(projectsGridItem);\n  \n    // project-grid-item-title-add-todo-item-wrapper\n    let projectGridItemTitleAddTodoItemWrapper = document.createElement(\"div\");\n    projectGridItemTitleAddTodoItemWrapper.classList = \"project-grid-item-title-add-todo-item-wrapper\";\n    projectsGridItem.appendChild(projectGridItemTitleAddTodoItemWrapper);\n\n    // project-grid-item-title\n    let projectGridItemTitle = document.createElement(\"h2\");\n    projectGridItemTitle.classList = \"project-grid-item-title\";\n    projectGridItemTitleAddTodoItemWrapper.appendChild(projectGridItemTitle);\n\n    let projectGridItemTitleText = document.createTextNode(`${projectlist[i].projectTitle}`);\n    projectGridItemTitle.appendChild(projectGridItemTitleText);\n\n    // project-grid-item-add-todo-item-delete-project-wrapper\n    let projectGridItemAddTodoItemDeleteProjectWrapper = document.createElement(\"div\");\n    projectGridItemAddTodoItemDeleteProjectWrapper.classList = \"project-grid-item-add-todo-item-delete-project-wrapper\";\n    projectGridItemTitleAddTodoItemWrapper.appendChild(projectGridItemAddTodoItemDeleteProjectWrapper);\n\n    // project-grid-item-add-todo-item\n    let projectGridItemAddTodoItem = document.createElement(\"div\");\n    projectGridItemAddTodoItem.classList = \"project-grid-item-add-todo-item\";\n    projectGridItemAddTodoItemDeleteProjectWrapper.appendChild(projectGridItemAddTodoItem);\n\n    // project-grid-item-add-todo-item fas fa-plus\n    let projectGridItemAddTodoItemFasFaPlus = document.createElement(\"i\");\n    projectGridItemAddTodoItemFasFaPlus.classList = \"fas fa-plus\";\n    projectGridItemAddTodoItem.appendChild(projectGridItemAddTodoItemFasFaPlus);\n\n    // project-grid-item-update-project-title\n    let projectGridItemUpdateProjectTitle = document.createElement(\"div\");\n    projectGridItemUpdateProjectTitle.classList = \"project-grid-item-update-project-title\";\n    projectGridItemAddTodoItemDeleteProjectWrapper.appendChild(projectGridItemUpdateProjectTitle);\n\n    // project-grid-item-update-project-title fas fa-edit\n    let projectGridItemUpdateProjectTitleFasFaEdit = document.createElement(\"i\");\n    projectGridItemUpdateProjectTitleFasFaEdit.classList = \"fas fa-edit\";\n    projectGridItemUpdateProjectTitle.appendChild(projectGridItemUpdateProjectTitleFasFaEdit);\n\n    // project-grid-item-delete-project\n    let projectGridItemDeleteProject = document.createElement(\"div\");\n    projectGridItemDeleteProject.classList = \"project-grid-item-delete-project\";\n    projectGridItemAddTodoItemDeleteProjectWrapper.appendChild(projectGridItemDeleteProject);\n\n    // project-grid-item-delete-project fas fa-trash-alt\n    let projectGridItemDeleteProjectFasFaTrashAlt = document.createElement(\"i\");\n    projectGridItemDeleteProjectFasFaTrashAlt.classList = \"fas fa-trash-alt\";\n    projectGridItemDeleteProject.appendChild(projectGridItemDeleteProjectFasFaTrashAlt);\n\n    // project-grid-item-todos\n    let projectGridItemTodos = document.createElement(\"div\");\n    projectGridItemTodos.classList = \"project-grid-item-todos\";\n    projectsGridItem.appendChild(projectGridItemTodos);\n\n    for (let j = 0; j < projectlist[i].todos.length; j++) {\n      // project-grid-item-todo\n      let projectGridItemTodo = document.createElement(\"div\");\n      projectGridItemTodo.classList = \"project-grid-item-todo\";\n      projectGridItemTodo.setAttribute('data-project-todo-item-index', j);\n\n      projectGridItemTodos.appendChild(projectGridItemTodo);\n\n      // project-grid-item-todo-properties-wrapper\n      let projectGridItemTodoPropertiesWrapper = document.createElement(\"div\");\n      projectGridItemTodoPropertiesWrapper.classList = \"project-grid-item-todo-properties-wrapper\";\n      projectGridItemTodo.appendChild(projectGridItemTodoPropertiesWrapper);\n\n      // project-grid-item-todo-title\n      let projectGridItemTodoTitle = document.createElement(\"div\");\n      projectGridItemTodoTitle.classList = \"project-grid-item-todo-title\";\n      projectGridItemTodoPropertiesWrapper.appendChild(projectGridItemTodoTitle);\n\n      let projectGridItemTodoTitleText = document.createTextNode(`${projectlist[i].todos[j].title}`);\n      projectGridItemTodoTitle.appendChild(projectGridItemTodoTitleText);\n\n      // project-grid-item-todo-description\n      let projectGridItemTodoDescription = document.createElement(\"div\");\n      projectGridItemTodoDescription.classList = \"project-grid-item-todo-description\";\n      projectGridItemTodoPropertiesWrapper.appendChild(projectGridItemTodoDescription);\n\n      let projectGridItemTodoDescriptionText = document.createTextNode(`Description: ${projectlist[i].todos[j].description}`);\n      projectGridItemTodoDescription.appendChild(projectGridItemTodoDescriptionText);\n\n      // project-grid-item-todo-priority\n      let projectGridItemTodoPriority = document.createElement(\"div\");\n      projectGridItemTodoPriority.classList = \"project-grid-item-todo-priority\";\n      projectGridItemTodoPropertiesWrapper.appendChild(projectGridItemTodoPriority);\n\n      let projectGridItemTodoPriorityText = document.createTextNode(`Priority: ${projectlist[i].todos[j].priority}`);\n      projectGridItemTodoPriority.appendChild(projectGridItemTodoPriorityText);\n\n      // project-grid-item-todo-notes\n      let projectGridItemTodoNotes = document.createElement(\"div\");\n      projectGridItemTodoNotes.classList = \"project-grid-item-todo-notes\";\n      projectGridItemTodoPropertiesWrapper.appendChild(projectGridItemTodoNotes);\n\n      let projectGridItemTodoNotesText = document.createTextNode(`Notes: ${projectlist[i].todos[j].notes}`);\n      projectGridItemTodoNotes.appendChild(projectGridItemTodoNotesText);\n\n      // project-grid-item-todo-finished\n      let projectGridItemTodoFinished = document.createElement(\"div\");\n      projectGridItemTodoFinished.classList = \"project-grid-item-todo-finished\";\n      projectGridItemTodoPropertiesWrapper.appendChild(projectGridItemTodoFinished);\n\n      let projectGridItemTodoFinishedText = document.createTextNode(`Finished: ${projectlist[i].todos[j].checklist}`);\n      projectGridItemTodoFinished.appendChild(projectGridItemTodoFinishedText);\n\n      // project-grid-item-todo-duedate-expand-wrapper\n      let projectGridItemTodoDuedateExpandWrapper = document.createElement(\"div\");\n      projectGridItemTodoDuedateExpandWrapper.classList = \"project-grid-item-todo-duedate-expand-wrapper\";\n      projectGridItemTodoPropertiesWrapper.appendChild(projectGridItemTodoDuedateExpandWrapper);\n\n      // project-grid-item-todo-duedate\n      let projectGridItemTodoDuedate = document.createElement(\"div\");\n      projectGridItemTodoDuedate.classList = \"project-grid-item-todo-duedate\";\n      projectGridItemTodoDuedateExpandWrapper.appendChild(projectGridItemTodoDuedate);\n\n      let projectGridItemTodoDuedateText = document.createTextNode(`${projectlist[i].todos[j].dueDate}`)\n      projectGridItemTodoDuedate.appendChild(projectGridItemTodoDuedateText);\n\n      // project-grid-item-todo-expand\n      let projectGridItemTodoExpand = document.createElement(\"div\");\n      projectGridItemTodoExpand.classList = \"project-grid-item-todo-expand\";\n      projectGridItemTodoDuedateExpandWrapper.appendChild(projectGridItemTodoExpand);\n\n      // project-grid-item-todo-expand-down fas fa-angle-double-down\n      let projectGridItemTodoExpandDownFasFaAngleDoubleDown = document.createElement(\"i\");\n      projectGridItemTodoExpandDownFasFaAngleDoubleDown.classList = \"project-grid-item-todo-expand-down fas fa-angle-double-down\";\n      projectGridItemTodoExpand.appendChild(projectGridItemTodoExpandDownFasFaAngleDoubleDown);\n\n      // project-grid-item-todo-expand-up fas fa-angle-double-up\n      let projectGridItemTodoExpandUpFasFaAngleDoubleUp = document.createElement(\"i\");\n      projectGridItemTodoExpandUpFasFaAngleDoubleUp.classList = \"project-grid-item-todo-expand-up fas fa-angle-double-up\";\n      projectGridItemTodoExpand.appendChild(projectGridItemTodoExpandUpFasFaAngleDoubleUp);\n\n      // project-grid-item-todo-buttons-wrapper\n      let projectGridItemTodoButtonsWrapper = document.createElement(\"div\");\n      projectGridItemTodoButtonsWrapper.classList = \"project-grid-item-todo-buttons-wrapper\";\n      projectGridItemTodo.appendChild(projectGridItemTodoButtonsWrapper);\n\n      // project-grid-item-todo-buttons-checklist\n      let projectGridItemTodoButtonsChecklist = document.createElement(\"div\");\n      projectGridItemTodoButtonsChecklist.classList = \"project-grid-item-todo-buttons-checklist\";\n      projectGridItemTodoButtonsWrapper.appendChild(projectGridItemTodoButtonsChecklist);\n\n      // project-grid-item-todo-buttons-checklist fas fa-check\n      let projectGridItemTodoButtonsChecklistFasFaCheck = document.createElement(\"i\");\n      projectGridItemTodoButtonsChecklistFasFaCheck.classList = \"fas fa-check\";\n      projectGridItemTodoButtonsChecklist.appendChild(projectGridItemTodoButtonsChecklistFasFaCheck);\n\n      // project-grid-item-todo-buttons-update\n      let projectGridItemTodoButtonsUpdate = document.createElement(\"div\");\n      projectGridItemTodoButtonsUpdate.classList = \"project-grid-item-todo-buttons-update\";\n      projectGridItemTodoButtonsWrapper.appendChild(projectGridItemTodoButtonsUpdate);\n\n      // project-grid-item-todo-buttons-update fas fa-edit\n      let projectGridItemTodoButtonsUpdateFasFaEdit = document.createElement(\"i\");\n      projectGridItemTodoButtonsUpdateFasFaEdit.classList = \"fas fa-edit\";\n      projectGridItemTodoButtonsUpdate.appendChild(projectGridItemTodoButtonsUpdateFasFaEdit);\n\n      // project-grid-item-todo-buttons-delete\n      let projectGridItemTodoButtonsDelete = document.createElement(\"div\");\n      projectGridItemTodoButtonsDelete.classList = \"project-grid-item-todo-buttons-delete\";\n      projectGridItemTodoButtonsWrapper.appendChild(projectGridItemTodoButtonsDelete);\n\n      // project-grid-item-todo-buttons-delete fas fa-trash-alt\n      let projectGridItemTodoButtonsDeleteFasFaTrashAlt = document.createElement(\"div\");\n      projectGridItemTodoButtonsDeleteFasFaTrashAlt.classList = \"fas fa-trash-alt\";\n      projectGridItemTodoButtonsDelete.appendChild(projectGridItemTodoButtonsDeleteFasFaTrashAlt);\n\n    }\n    \n    // project-grid-item-todo project-grid-item-todo-add-todo-item\n    let projectGridItemTodoAddTodoItem = document.createElement(\"div\");\n    projectGridItemTodoAddTodoItem.classList = \"project-grid-item-todo project-grid-item-todo-add-todo-item\";\n    projectGridItemTodos.appendChild(projectGridItemTodoAddTodoItem);\n\n    let projectGridItemTodoAddTodoItemText = document.createTextNode(\"ADD TODO ITEM\");\n    projectGridItemTodoAddTodoItem.appendChild(projectGridItemTodoAddTodoItemText);\n\n  }\n  // add minimize and maximize functionality when clicking on gridItemTodo\n  Object(_eventController__WEBPACK_IMPORTED_MODULE_0__[\"collapseGridItemTodo\"])();\n\n  // display createTodoItemForm when clicked on the add todo item wide button at the bottom\n  Object(_eventController__WEBPACK_IMPORTED_MODULE_0__[\"displayCreateTodoItemFormAddTodoItemButton\"])(projectlist);\n\n  // display createTodoItemForm when click on the plus icon next to the project title\n  Object(_eventController__WEBPACK_IMPORTED_MODULE_0__[\"displayCreateTodoItemFormProjectGridItemAddTodoItem\"])(projectlist);\n\n  // update checklist status when clicked on checklist icon\n  Object(_eventController__WEBPACK_IMPORTED_MODULE_0__[\"updateChecklistStatusButton\"])(projectlist);\n\n  // add linethrough project-grid-item-todo-properties-wrapper if checklist status is yes\n  Object(_eventController__WEBPACK_IMPORTED_MODULE_0__[\"addChecklistFinishedLineThrough\"])(projectlist);\n\n  // add a background-color based on the priority status for project-grid-item-todo\n  Object(_eventController__WEBPACK_IMPORTED_MODULE_0__[\"addProjectGridItemTodoPriorityBgColor\"])(projectlist);\n\n  // add delete project function when clicking on the project's delete icon\n  Object(_eventController__WEBPACK_IMPORTED_MODULE_0__[\"deleteProjectButton\"])(projectlist);\n\n  // add delete todo item from project function when clicking on the todo item's delete icon\n  Object(_eventController__WEBPACK_IMPORTED_MODULE_0__[\"deleteTodoItemFromProjectButton\"])(projectlist);\n\n  // add function to edit the projectTitle when clicked on the project-grid-item-update-project-title button\n  Object(_eventController__WEBPACK_IMPORTED_MODULE_0__[\"editProjectGridItemTitleButton\"])(projectlist);\n\n  // add function to edit the project-grid-item-todo-properties when clicking on the project-grid-item-todo-buttons-update button\n  Object(_eventController__WEBPACK_IMPORTED_MODULE_0__[\"editProjectGridItemTodoButton\"])(projectlist);\n\n  // set the localStorage projectlist to the updated projeclist array\n  localStorage.setItem('projectlist', JSON.stringify(projectlist));\n  let projectListLocalStorage = JSON.parse(localStorage.getItem('projectlist'));\n  projectlist = projectListLocalStorage;\n\n\n});\n\n\n\n/*\nArray to store all projects and their todo's in\n\n  let projectlist = [ \n    {projectTitle: \"project1\", todos: [{title: \"testTitle1\", description: \"testDescription1\", priority: \"low\", projectName: 0, notes: \"notes example\", checklist: \"yes\", dueDate: \"11/12/2020\"}, {title: \"testTitle2\", description: \"testDescription2\", priority: \"medium\", projectName: 0, notes: \"notes example\", checklist: \"yes\", dueDate: \"11/12/2020\"}]},\n    {projectTitle: \"project2\", todos: [{title: \"testTitle3\", description: \"testDescription3\", priority: \"high\", projectName: 1, notes: \"notes example\", checklist: \"yes\", dueDate: \"11/12/2020\"}, {title: \"testTitle4\", description: \"testDescription4\", priority: \"low\", projectName: 1, notes: \"notes example\", checklist: \"yes\", dueDate: \"11/12/2020\"}]},\n  ];\n*/\n\n// projects-grid html code\n/*\n  <div class=\"projects-grid\">\n    <div class=\"projects-grid-item\">\n      <div class=\"project-grid-item-title-add-todo-item-wrapper\">\n        <h2 class=\"project-grid-item-title\">\n          project1\n        </h2>\n        <div class=\"project-grid-item-add-todo-item-delete-project-wrapper\">\n          <div class=\"project-grid-item-add-todo-item\">\n            <i class=\"fas fa-plus\"></i>\n          </div>\n          <div class=\"project-grid-item-update-project-title\">\n            <i class=\"fas fa-edit\"></i>\n          </div>\n          <div class=\"project-grid-item-delete-project\">\n            <i class=\"fas fa-trash-alt\"></i>\n          </div>\n        </div>\n      </div>\n      <div class=\"project-grid-item-todos\">\n        <div class=\"project-grid-item-todo\">\n          <div class=\"project-grid-item-todo-properties-wrapper\">\n            <div class=\"project-grid-item-todo-title\">project-grid-item-todo-title</div>\n            <div class=\"project-grid-item-todo-description\">project-grid-item-todo-description</div>\n            <div class=\"project-grid-item-todo-priority\">Priotity: high</div>\n            <div class=\"project-grid-item-todo-notes\">notes</div>\n            <div class=\"project-grid-item-todo-finished\">Finished: no</div>          \n            <div class=\"project-grid-item-todo-duedate-expand-wrapper\">\n              <div class=\"project-grid-item-todo-duedate\">01/01/2020</div>\n              <div class=\"project-grid-item-todo-expand\">\n                <i class=\"project-grid-item-todo-expand-down fas fa-angle-double-down\"></i>\n                <i class=\"project-grid-item-todo-expand-up fas fa-angle-double-up\"></i>\n              </div>\n            </div>\n          </div>\n          <div class=\"project-grid-item-todo-buttons-wrapper\">\n            <div class=\"project-grid-item-todo-buttons-checklist\">\n              <i class=\"fas fa-check\"></i>\n            </div>\n            <div class=\"project-grid-item-todo-buttons-update\">\n              <i class=\"fas fa-edit\"></i>\n            </div>\n            <div class=\"project-grid-item-todo-buttons-delete\">\n              <i class=\"fas fa-trash-alt\"></i>\n            </div>\n          </div>\n        </div>\n        <div class=\"project-grid-item-todo\">\n          <div class=\"project-grid-item-todo-properties-wrapper\">\n            <div class=\"project-grid-item-todo-title\">project-grid-item-todo-title</div>\n            <div class=\"project-grid-item-todo-description\">project-grid-item-todo-description</div>\n            <div class=\"project-grid-item-todo-priority\">Priotity: high</div>\n            <div class=\"project-grid-item-todo-notes\">notes</div>\n            <div class=\"project-grid-item-todo-finished\">Finished: no</div>          \n            <div class=\"project-grid-item-todo-duedate-expand-wrapper\">\n              <div class=\"project-grid-item-todo-duedate\">01/01/2020</div>\n              <div class=\"project-grid-item-todo-expand\">\n                <i class=\"project-grid-item-todo-expand-down fas fa-angle-double-down\"></i>\n                <i class=\"project-grid-item-todo-expand-up fas fa-angle-double-up\"></i>\n              </div>\n            </div>\n          </div>\n          <div class=\"project-grid-item-todo-buttons-wrapper\">\n            <div class=\"project-grid-item-todo-buttons-checklist\">\n              <i class=\"fas fa-check\"></i>\n            </div>\n            <div class=\"project-grid-item-todo-buttons-update\">\n              <i class=\"fas fa-edit\"></i>\n            </div>\n            <div class=\"project-grid-item-todo-buttons-delete\">\n              <i class=\"fas fa-trash-alt\"></i>\n            </div>\n          </div>\n        </div>\n        <div class=\"project-grid-item-todo project-grid-item-todo-add-todo-item\">ADD TODO ITEM</div>\n      </div>\n    </div>\n        \n  </div>\n*/\n\n//# sourceURL=webpack:///./src/renderprojectstodos.js?");

/***/ })

/******/ });